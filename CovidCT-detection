import torch
import numpy as np
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms

#自定义的文件中导入
from tools.dataload import CovidCTDataset

#按照通道标准化
normalize=transforms.Normalize(mean=[0.485,0.456,0.406],std[0.229,0.224,0.225])

#图像增强
train_transformer=transforms.Compose([
    transforms.Resize(256),
    transforms.RandomResizedCrop((224),scale(0.5,1.0)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    normalize
])

val_transformer=transforms.Compose([
    transforms.Resize(224),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    normalize
])

batchsize=32
total_epoch=20

#数据加载
trainset=CovidCTDataset(root_dir='/data/COVID-CT/',)


print('训练集:',trainset._len_())
print('验证集:',valset._len_())
print('测试集:',testset._len_())


from torch.utils.data import DataLoader

#加载DataLoader
train_loader=DataLoader(trainset,batch_size=batchsize,drop_last=False,shuffle=True)
val_loader=DataLoader(valset,batch_size=batchsize,drop_last=False,shuffle=True)
test_loader=DataLoader(testset,batch_size=batchsize,drop_last=False,shuffle=True)

#加载预训练模型
import torchxrayvision as xrv
model=xrv.models.DenseNet(num_classes=2,in_channels=3).cuda()
model_name='DenseNet_medical'
torch.cuda.empty_cache()

#定义损失函数，二分类交叉信息熵
criteria=nn.CrossEntropyLoss()
#定义优化器
optimizer=optim.Adam(model.parameters(),lr=0.001)

device='cuda'

#训练
def train(optimizer,epoch,model,train_loader,model_name,criteria):
    model.train()
    train_loss=0
    train_correct=0
    
    for batch_index,batch_samples in enumerate(train_loader):
        #将数据放到device中
        data,target=batch_samples['img'].to(device),batch_samples['label'].to(device)
        #前向传播
        ouput=model(data)
        #计算损失
        loss=criteria(ouput,target.long())
        #累计损失
        train_loss+=loss
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        #预测结果
        pre=output.argmax(dim=1,keepdim=True)
        train_correct+=pred.eq(target.long().view_as(pred)).sum().item()
    #显示训练结果
    print('test:aval_loss:{:.4f},correct:{}/{}({:.0f}%)'.format(train_loss/len(train_loader.dataset),
                                                               train_correct,len(train_loader.dataset),
                                                              100*train_correct/len(train_loader.dataset)))
    #放回一次epoch的平均误差
    return train_loss/len(train_loader.dataset)

import torch.nn.functional as F 

def val(model,val_loader,criteria):
    model.eval()
    val_loss,correct=0,0
    with torch.no_grad():
        predlist,scorelist,targelist=[],[],[]
        
        for batch_index,batch_samples in enumerate(val_loader):
            data,target=batch_samples['img'].to(device),batch_samples['label'].to(device)
            output=model(data)
            val_loss+=criteria(output,target.long())
            
            score=F.softmax(output,dim=1)
            pred=output.argmax(dim=1,keepdim=True)
            correct+=pred.eq(target.long().view_as(pred)).sum().item()
            
            
            predlist=np.append(predlist,pred.cpu(),numpy())
            scorelist=np.append(scorelist,score.cpu().numpy()[:,1])
            targetlist=np.append(targetlist,target.long().cpu().numpy())
    return targetlist,scorelist,predlist,val_loss/len(val_loader.dataset)

#测试
def test(model,test_loader):
    model.eval()
 
    with torch.no_grad():
        predlist,scorelist,targelist=[],[],[]
        
        for batch_index,batch_samples in enumerate(val_loader):
            data,target=batch_samples['img'].to(device),batch_samples['label'].to(device)
            output=model(data)
            
            score=F.softmax(output,dim=1)
            pred=output.argmax(dim=1,keepdim=True)
            
            predlist=np.append(predlist,pred.cpu(),numpy())
            scorelist=np.append(scorelist,score.cpu().numpy()[:,1])
            targetlist=np.append(targetlist,target.long().cpu().numpy())
    return targetlist,scorelist,predlist


for epoch in range(total_epoch):
    train_loss=train(optimizer,epoch,model,train_loader,model_name,criteria)
    targetlist,scorelist,predlist,val_loss=val(model,val_loader,criteria)
    print('Target:',targetlist)
    print('Score:',scorelist)
    print('Predict:',predlist)
    
    if (epoch+1)%5==0:
    torch.save(model.state_dic(),'covid_detection.pt')
    
targetlist,scorelist,predlist=test(model,test_loader)

